{"version":3,"sources":["moji-translate/index.js","components/ChatWindow/ChatWindow.tsx","utils/scrollToElement.ts","components/MessageStream/MessageStream.js","components/MessageStream/MessageStream.connected.js","components/ComposeMessage/ComposeMessage.js","actions/index.js","components/ComposeMessage/ComposeMessage.connected.js","components/MessageBox/MessageBox.tsx","reducers/index.js","sagas/translateMessage.js","sagas/index.js","assets/github.svg","App.js","fonts/source-sans-pro-v11-latin-regular.woff2","fonts/source-sans-pro-v11-latin-regular.woff","index.tsx"],"names":["emojilib","require","SYMBOLS","allEmoji","lib","isMaybeAlreadyAnEmoji","word","match","join","getAllEmojiForWord","originalWord","trim","toLowerCase","maybeSingular","length","slice","maybePlural","maybeVerbedSimple","maybeVerbedVowel","maybeVerbedDoubled","indexOf","verb","substr","useful","push","emoji","words","keywords","char","category","getEmojiForWord","translations","Math","floor","random","module","exports","translateForDisplay","node","document","createElement","firstSymbol","lastSymbol","innerHTML","i","option","textContent","appendChild","translate","sentence","onlyEmoji","translation","split","translated","Wrapper","styled","div","ChatWindow","ConnectedMessageStream","ConnectedComposeMessage","scrollToElement","selector","index","options","querySelectorAll","scrollIntoView","connect","state","messages","scrollToNode","useEffect","behavior","map","message","Form","form","Input","input","SEND_MESSAGE","MESSAGE_TRANSLATED","messageTranslated","text","type","payload","mapDispatchToProps","handleSendMessage","useState","setMessage","onSubmit","event","preventDefault","composedMessage","placeholder","aria-label","value","onChange","target","isBot","StyledMessage","MessageBox","author","className","initialState","sendMessage","translateMessage","put","rootSaga","all","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","run","Main","main","Header","header","Section","section","Footer","footer","App","href","src","github","alt","GlobalStyle","createGlobalStyle","woff2","woff","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.412b75d2.chunk.js","sourcesContent":["const emojilib = require('emojilib');\nconst SYMBOLS = '!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~';\nconst allEmoji = emojilib.lib;\n\n/**\n * Returns true for something that's already an emoji like ü§ñ.\n * @param {String} word The word to be translated\n * @returns {Bool}\n */\nfunction isMaybeAlreadyAnEmoji(word) {\n  let ranges = [\n      '\\ud83c[\\udf00-\\udfff]', // U+1F300 to U+1F3FF\n      '\\ud83d[\\udc00-\\ude4f]', // U+1F400 to U+1F64F\n      '\\ud83d[\\ude80-\\udeff]' // U+1F680 to U+1F6FF\n  ];\n  return word.match(ranges.join('|')) !== null;\n}\n\n/**\n * Returns the list of all emoji translations of an english word.\n * @param {String} word The word to be translated\n * @returns {Array} The list of emoji translations or '' if none exist.\n */\nfunction getAllEmojiForWord(originalWord) {\n  let word = originalWord.trim().toLowerCase();\n\n  if (!word || word === '' || word === 'a' || word === 'it' || word === 'is')\n    return '';\n\n  // Maybe this is a plural word but the word is the singular?\n  // Don't do it for two letter words since \"as\" would become \"a\" etc.\n  let maybeSingular = '';\n  if (word.length > 2 && word[word.length - 1] === 's') {\n    maybeSingular = word.slice(0, word.length - 1);\n  }\n\n  // Maybe this is a singular word but the word is the plural?\n  // Don't do this for single letter since that will pluralize crazy things.\n  let maybePlural = (word.length === 1) ? '' : word + 's';\n\n  let maybeVerbedSimple = '';\n  let maybeVerbedVowel = '';\n  let maybeVerbedDoubled  = '';\n\n  if (word.indexOf('ing') !== -1) {\n    let verb = word.substr(0, word.length - 3);\n    // eating -> eat\n    maybeVerbedSimple = verb;\n    // dancing -> dance\n    maybeVerbedVowel = verb + 'e';\n    // running -> run\n    maybeVerbedDoubled = verb.substr(0, verb.length - 1);\n  }\n\n  // Go through all the things and find the first one that matches.\n  let useful = [];\n\n  // If this is already an emoji, don't try to translate it.\n  if (isMaybeAlreadyAnEmoji(word)) {\n    useful.push(word);\n    return useful;\n  }\n\n  // If it's \"i\" or \"i\", add some faces to it.\n  if (word === 'i' || word === 'you') {\n    useful.push('üòÄ');\n    useful.push('üòä');\n  } else if (word === 'she'){\n    useful.push('üíÅ');\n  } else if (word === 'he'){\n    useful.push('üíÅ‚Äç‚ôÇÔ∏è');\n  } else if (word === 'we' || word === 'they') {\n    useful.push('üë©‚Äçüë©‚Äçüë¶‚Äçüë¶');\n  } else if (word === 'am' || word === 'is' || word === 'are') {\n    useful.push('üëâ');\n  } else if (word === 'thanks') {\n    useful.push('üôå');\n  }\n\n  for (let emoji in allEmoji) {\n    let words = allEmoji[emoji].keywords;\n    // TODO: omg refactor this one day, please. Why is this even. Why.\n    if (word === allEmoji[emoji].char ||\n        emoji === word || (emoji === word + '_face') ||\n        emoji === maybeSingular || emoji === maybePlural ||\n        emoji === maybeVerbedSimple || emoji === maybeVerbedVowel || emoji === maybeVerbedDoubled ||\n        (words && words.indexOf(word) >= 0) ||\n        (words && words.indexOf(maybeSingular) >= 0) ||\n        (words && words.indexOf(maybePlural) >= 0) ||\n        (words && words.indexOf(maybeVerbedSimple) >= 0) ||\n        (words && words.indexOf(maybeVerbedVowel) >= 0) ||\n        (words && words.indexOf(maybeVerbedDoubled) >= 0)) {\n      // If it's a two letter word that got translated to a flag, it's 99% of the\n      // time incorrect, so stop doing that.\n      if (!(word.length <= 3 && allEmoji[emoji].category === 'flags')) {\n        useful.push(allEmoji[emoji].char);\n      }\n    }\n  }\n  return (useful.length === 0) ? '' : useful;\n}\n\n/**\n * Returns a random emoji translation of an english word.\n * @param {String} word The word to be translated.\n * @returns {String} A random emoji translation or '' if none exists.\n */\nfunction getEmojiForWord(word) {\n  let translations = getAllEmojiForWord(word);\n  return translations[Math.floor(Math.random() * translations.length)];\n}\n\n/**\n * Returns a displayable, possibly translated english word to emoji.\n * This will either be:\n *  - a span containing the word if it cannot be translated\n *  - a span containing an emoji if only one translation exists\n *  - a span containing a <select> with all the translations if multiple exist\n * @param {String} word The word to be translated\n * @returns {HTMLElement} A <span> or <select> element as above.\n */\nfunction translateForDisplay(word) {\n  var node = document.createElement('span');\n\n  // Punctuation blows. Get all the punctuation at the start and end of the word.\n  let firstSymbol = '';\n  let lastSymbol = '';\n\n  while (SYMBOLS.indexOf(word[0]) !== -1) {\n    firstSymbol += word[0];\n    word = word.slice(1, word.length);\n  }\n  while (SYMBOLS.indexOf(word[word.length - 1]) !== -1) {\n    lastSymbol += word[word.length - 1];\n    word = word.slice(0, word.length - 1);\n  }\n\n  // If it's already an emoji, return it.\n  var emoji = getAllEmojiForWord(word);\n  if (emoji === '')\n    emoji = [word];\n\n  if (emoji.length === 1) {\n    node = document.createElement('span');\n    node.innerHTML = firstSymbol + emoji + lastSymbol + ' ';\n  } else {\n    node = document.createElement('select');\n    for (var i = 0; i < emoji.length; i++) {\n      var option = document.createElement('option');\n      option.textContent = firstSymbol + emoji[i] + lastSymbol + ' ';\n      node.appendChild(option);\n    }\n  }\n  return node;\n}\n\n/**\n * Translates an entire sentence to emoji. If multiple translations exist\n * for a particular word, a random emoji is picked.\n * @param {String} sentence The sentence to be translated\n * @param {Bool} onlyEmoji True if the translation should omit all untranslatable words\n * @returns {String} An emoji translation!\n */\nfunction translate(sentence, onlyEmoji) {\n  let translation = '';\n  let words = sentence.split(' ');\n  for (let i = 0; i < words.length; i++ ) {\n    // Punctuation blows. Get all the punctuation at the start and end of the word.\n    // TODO: stop copy pasting this.\n    let firstSymbol = '';\n    let lastSymbol = '';\n    var word = words[i];\n\n    while (SYMBOLS.indexOf(word[0]) !== -1) {\n      firstSymbol += word[0];\n      word = word.slice(1, word.length);\n    }\n    while (SYMBOLS.indexOf(word[word.length - 1]) !== -1) {\n      lastSymbol += word[word.length - 1];\n      word = word.slice(0, word.length - 1);\n    }\n\n    if (onlyEmoji) {\n      firstSymbol = lastSymbol = ''\n    }\n\n    let translated = getEmojiForWord(word);\n    if (translated) {\n      translation += firstSymbol + translated + lastSymbol + ' ';\n    } else if (!onlyEmoji){\n      translation += firstSymbol + word + lastSymbol +  ' '\n    }\n  }\n  return translation;\n}\n\nmodule.exports.isMaybeAlreadyAnEmoji = isMaybeAlreadyAnEmoji;\nmodule.exports.getAllEmojiForWord = getAllEmojiForWord;\nmodule.exports.getEmojiForWord = getEmojiForWord;\nmodule.exports.translateForDisplay = translateForDisplay;\nmodule.exports.translate = translate;\n","import styled from 'styled-components'\n\nimport { ConnectedMessageStream, ConnectedComposeMessage } from '..'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 16rem;\n`\n\nexport const ChatWindow = () => (\n  <Wrapper>\n    <ConnectedMessageStream />\n    <ConnectedComposeMessage />\n  </Wrapper>\n)\n","export const scrollToElement = (\n  selector: string,\n  index: number,\n  options: ScrollIntoViewOptions\n): void => {\n  const node = document.querySelectorAll(selector)[index]\n\n  if (node) {\n    node.scrollIntoView(options)\n  }\n}\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { MessageBox } from '..'\nimport { scrollToElement } from '../../utils'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 20rem;\n  height: 20rem;\n  border: 1px solid;\n  border-radius: 0.25rem;\n  padding: 1rem;\n  overflow: auto;\n`\n\nexport const MessageStream = ({ messages, scrollToNode = scrollToElement }) => {\n  useEffect(() => {\n    if (messages.length) {\n      scrollToNode('.message', messages.length - 1, { behavior: 'smooth' })\n    }\n  })\n\n  return (\n    <Wrapper>\n      {messages.map((message, index) => (\n        <MessageBox key={index} message={message} />\n      ))}\n    </Wrapper>\n  )\n}\n","import { connect } from 'react-redux'\n\nimport { MessageStream } from '.'\n\nconst mapStateToProps = (state) => ({\n  messages: state.messages\n})\n\nexport const ConnectedMessageStream = connect(mapStateToProps)(MessageStream)\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst Form = styled.form`\n  margin-top: 2rem;\n`\n\nconst Input = styled.input`\n  border: 1px solid #aaa;\n  padding: 0.5rem;\n`\n\nexport const ComposeMessage = ({ handleSendMessage }) => {\n  const [message, setMessage] = useState('')\n\n  const handleChange = (event) => setMessage(event.target.value)\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const composedMessage = message.trim()\n    if (composedMessage) {\n      handleSendMessage(composedMessage)\n      setMessage('')\n    }\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        type='text'\n        placeholder='Write a message'\n        aria-label='Write a message'\n        value={message}\n        onChange={handleChange}\n      />\n    </Form>\n  )\n}\n","export const SEND_MESSAGE = 'SEND_MESSAGE'\nexport const MESSAGE_TRANSLATED = 'MESSAGE_TRANSLATED'\n\nexport const sendMessage = (text) => ({\n  type: SEND_MESSAGE,\n  payload: { text }\n})\n\nexport const messageTranslated = (text) => ({\n  type: MESSAGE_TRANSLATED,\n  payload: { text }\n})\n","import { connect } from 'react-redux'\n\nimport { ComposeMessage } from '.'\nimport { sendMessage } from '../../actions'\n\nconst mapDispatchToProps = {\n  handleSendMessage: (message) => sendMessage(message)\n}\n\nexport const ConnectedComposeMessage = connect(\n  null,\n  mapDispatchToProps\n)(ComposeMessage)\n","import styled from 'styled-components'\n\nimport { Message } from '../../types'\ninterface Props {\n  message: Message\n}\n\ninterface StyleProps {\n  isBot: boolean\n}\n\nconst Wrapper = styled.div<StyleProps>`\n  display: flex;\n  justify-content: flex-end;\n  ${({ isBot }) =>\n    isBot &&\n    `\n      justify-content: flex-start;\n    `}\n`\n\nconst StyledMessage = styled.div<StyleProps>`\n  margin: 0.25rem;\n  border-radius: 0.25rem;\n  padding: 0.5rem;\n  color: #fff;\n  background-color: #555;\n  ${({ isBot }) =>\n    isBot &&\n    `\n      color: #000;\n      background-color: #eee;\n    `}\n`\n\nexport const MessageBox = ({ message }: Props) => {\n  const { author, text } = message\n  const isBot = author === 'Bot'\n\n  return (\n    <Wrapper isBot={isBot}>\n      <StyledMessage isBot={isBot} className='message'>\n        {text}\n      </StyledMessage>\n    </Wrapper>\n  )\n}\n","import { SEND_MESSAGE, MESSAGE_TRANSLATED } from '../actions'\n\nconst initialState = {\n  messages: [\n    {\n      author: 'Bot',\n      text: 'Write a message and see it translated to emojis!'\n    }\n  ]\n}\n\nconst sendMessage = (state, { payload }) => ({\n  ...state,\n  messages: [...state.messages, { author: 'You', text: payload.text }]\n})\n\nconst messageTranslated = (state, { payload }) => ({\n  ...state,\n  messages: [...state.messages, { author: 'Bot', text: payload.text }]\n})\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return sendMessage(state, action)\n    case MESSAGE_TRANSLATED:\n      return messageTranslated(state, action)\n    default:\n      return state\n  }\n}\n","import { put } from 'redux-saga/effects'\n\nimport translate from '../moji-translate'\nimport { messageTranslated } from '../actions'\n\nexport const translateMessage = function* ({ payload: { text } }) {\n  yield put(messageTranslated(translate.translate(text)))\n}\n","import { all, takeEvery } from 'redux-saga/effects'\n\nimport { SEND_MESSAGE } from '../actions'\nimport { translateMessage } from './translateMessage'\n\nexport const rootSaga = function* () {\n  yield all([takeEvery(SEND_MESSAGE, translateMessage)])\n}\n","export default __webpack_public_path__ + \"static/media/github.66378707.svg\";","import React from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport styled from 'styled-components'\n\nimport { ChatWindow } from './components'\nimport { reducer } from './reducers'\nimport { rootSaga } from './sagas'\nimport github from './assets/github.svg'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(rootSaga)\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 80%;\n  max-width: 64rem;\n  height: 100vh;\n  margin: 0 auto;\n`\n\nconst Header = styled.header`\n  text-align: center;\n`\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: auto;\n`\n\nconst Footer = styled.footer`\n  margin: 2rem;\n`\n\nexport const App = () => (\n  <Main>\n    <Header>\n      <h1>Emoji Chatbot</h1>\n    </Header>\n    <Section>\n      <article>\n        <Provider store={store}>\n          <ChatWindow />\n        </Provider>\n      </article>\n    </Section>\n    <Footer>\n      <a href='https://github.com/joelgeorgev/emoji-chatbot'>\n        <img src={github} alt='Go to GitHub repository page' />\n      </a>\n    </Footer>\n  </Main>\n)\n","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.96b15882.woff2\";","export default __webpack_public_path__ + \"static/media/source-sans-pro-v11-latin-regular.74ddb2b0.woff\";","import ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { App } from './App'\nimport woff2 from './fonts/source-sans-pro-v11-latin-regular.woff2'\nimport woff from './fonts/source-sans-pro-v11-latin-regular.woff'\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Source Sans Pro', sans-serif;\n    overscroll-behavior-y: none;\n  }\n\n  /* source-sans-pro-regular - latin */\n  @font-face {\n    font-family: 'Source Sans Pro';\n    font-style: normal;\n    font-weight: 400;\n    font-display: optional;\n    src: local('Source Sans Pro Regular'), local('SourceSansPro-Regular'),\n        url(${woff2}) format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n        url(${woff}) format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  }\n`\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}